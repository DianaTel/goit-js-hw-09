{"mappings":"oeA0DA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAIpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAXbL,EAAKa,iBAAiB,SAetB,SAAyBC,GACvBA,EAAEC,iBAMF,IAAIC,EAAaC,OAAOjB,EAAKE,cAAc,uBAAuBgB,OAC9DC,EAAYF,OAAOjB,EAAKE,cAAc,sBAAsBgB,OAC5DE,EAAcH,OAAOjB,EAAKE,cAAc,wBAAwBgB,OAEpE,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAErClB,EAAckB,EAAGL,GACdM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBP,EAAAyB,OAAOC,QAAQ,uBAAqBpB,QAAiBC,MAAU,IAEhEoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBP,EAAAyB,OAAOG,QAAQ,sBAAoBtB,QAAeC,MAAU,IAG9DW,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// import Notiflix from 'notiflix';\n\n// 1v\n// // Import library\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// // Get form element\n// const formRef = document.querySelector('.form');\n\n// // Set event listener submit on form\n// formRef.addEventListener('submit', onSubmitForm);\n\n// // Create promise\n// function createPromise(position, delay) {\n//   const obj = { position, delay };\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         // Fulfill\n//         resolve(obj);\n//       } else {\n//         // Reject\n//         reject(obj);\n//       }\n//     }, delay);\n//   });\n// }\n\n// // Submit form\n// function onSubmitForm(e) {\n//   e.preventDefault();\n\n//   let delay = Number(formRef.delay.value);\n\n//   for (let i = 1; i <= formRef.amount.value; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     delay += Number(formRef.step.value);\n//   }\n// }\n\n// 2v\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('click', onPromiseCreate);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromiseCreate(e) {\n  e.preventDefault();\n  // const { delay, step, amount } = e.currentTarget.elements;\n  // let inputDelay = Number(delay.value);\n  // let inputStep = Number(step.value);\n  // let inputAmount = Number(amount.value);\n\n  let inputDelay = Number(form.querySelector('input[name=\"delay\"]').value);\n  let inputStep = Number(form.querySelector('input[name=\"step\"]').value);\n  let inputAmount = Number(form.querySelector('input[name=\"amount\"]').value);\n\n  for (let i = 1; i <= inputAmount; i += 1) {\n\n    createPromise(i, inputDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n      inputDelay += inputStep;\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","inputDelay","Number","value","inputStep","inputAmount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.18fb78e1.js.map"}